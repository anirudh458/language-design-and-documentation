Simple{
func merge(1Darr arr[] int,l int,m int,r int)
{
    i int;
    j int;
    k int;
    n1 int;
    n2 int; 
    n1 = m - l + 1; 
    n2 =  r - m; 

    1Darr L[n1] int;
    1Darr R[n2] int; 
  
    for (i = 0; i < n1; i=i+1) 
    {
        L[i] = arr[l + i];
    } 
    for (j = 0; j < n2; j=j+1) 
     {   R[j] = arr[m + 1+ j];
     } 

    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i=i+1; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j=j+1; 
        } 
        k=k+1; 
    } 
  
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i=i+1; 
        k=k+1; 
    } 

    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j=j+1; 
        k=k+1; 
    } 
}

func mergeSort(1Darr arr[] int,l int,r int) int
{
     if (l < r) 
    { 
        m int = l+(r-l)/2;  
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
}
func main()
{
    1Darr arr[5] int; 
    arr={ 12, 11, 13, 5, 6 }; 
    n int; 
    n = 5; 
    i int;
  
    mergeSort(arr, 0,n-1); 
    
    for (i = 0; i < n; i=i+1) 
    {
        print_int(arr[i]);
        print_string(' ')
     }
}
}